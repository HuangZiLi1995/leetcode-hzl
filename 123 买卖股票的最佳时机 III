### 解题思路
动态规划
每一天共有五个状态：
1.完成0次交易，手中无股票  dp[0][0]  都为0
2.完成0次交易，手中有股票  dp[0][1]  = 前一天有股票，或者今天买进
                                    max(dp[0][1], -prices[i])
3.完成1次交易，手中无股票  dp[1][0]  = 前一天无股票，或者今天卖出
                                    max(dp[1][0], dp[0][1]+prices[i])
4.完成1次交易，手中有股票  dp[1][1]  = 前一天有股票，或者今天买进
                                    max(dp[1][1], dp[1][0]-prices[i])
5.玩成2次交易，手中无股票  dp[2][0]  = 前一天无股票，或者今天卖出
                                    max(dp[2][0], dp[1][1]+prices[i])
由于第二天的状态只和前一天的状态相同，故只需保存一天的状态

优化：
1-5种状态中，每种状态的更新只需要前几种状态
比如3状态的更新，只用到了前一天的2，3状态
故 倒序更新 可以节约内存

时间复杂度O(N)
空间复杂度O(1)

### 代码

```python3
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if not prices: return 0
        n = len(prices)
        dp = [[0]*2 for _ in range(3)]
        dp[0][1], dp[1][1] = -prices[0], -prices[0]
        for i in range(1,n):
            dp[2][0] = max(dp[1][1]+prices[i], dp[2][0])
            dp[1][1] = max(dp[1][0]-prices[i], dp[1][1])
            dp[1][0] = max(dp[0][1]+prices[i], dp[1][0])
            dp[0][1] = max(-prices[i], dp[0][1])
        return dp[2][0]
```
