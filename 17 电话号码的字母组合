回溯法，递归，每次读取第一个数字
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []
        # 创建查找表
        dic = {'2':['a', 'b', 'c'],
               '3':['d', 'e', 'f'],
               '4':['g', 'h', 'i'],
               '5':['j', 'k', 'l'],
               '6':['m', 'n', 'o'],
               '7':['p', 'q', 'r', 's'],
               '8':['t', 'u', 'v'],
               '9':['w', 'x', 'y', 'z']}
        # 递归函数
        def findCombinations(digits, s=''):
            # 当digits为空时，说明digits已被读取完毕，将结果填入res中
            if not digits:
                res.append(s)
                return
            # 取出第一个数值
            for letter in dic[digits[0]]:
                findCombinations(digits[1:], s+letter)
            return
        res = []
        findCombinations(digits)
        return res
时间复杂度O(3**n)
空间复杂度O(3**n)
