### 解题思路
动态规划
因为存在负数，还需记录最小乘积
dp[i]记录以第i个数为结尾的子序列的最大乘积[0]和最小乘积[1]
当前数的的最小最大乘积存在两种可能：
1.只包含当前数nums[i]
2.包含前面的若干数
  1.若nums[i]为正，则最大数为dp[i-1][0]*nums[i]
                    最小数为dp[i-1][1]*nums[i]
  1.若nums[i]为正，则最大数为dp[i-1][1]*nums[i]
                    最小数为dp[i-1][0]*nums[i]
比较两者即可得到最大最小数

优化：
因为当前数的最大最小数只与前一个数的最大最小数有关
故只需记录前一个数的最大最小数即可

时间复杂度O(n)
空间复杂度O(1)

### 代码

```python3
class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        res = nums[0]
        MIN, MAX = nums[0], nums[0]
        for i in range(1,len(nums)):
            if nums[i] < 0:
                MIN, MAX = MAX, MIN
            MAX = max(MAX*nums[i], nums[i])
            MIN = min(MIN*nums[i], nums[i])
            res = max(res, MAX)
        return res
```
