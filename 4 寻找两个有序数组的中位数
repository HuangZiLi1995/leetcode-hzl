方法1：将nums1和nums2按序拼接成num，在从中读取中位数

class Solution:    
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        if not nums1:
            nums = nums2
        elif not nums2:
            nums = nums1
        else:
            nums = []
            i, j = 0, 0
            # 有序拼接nums
            while i < len(nums1) and j < len(nums2):
                if nums1[i] < nums2[j]:
                    nums.append(nums1[i])
                    i += 1
                else:
                    nums.append(nums2[j])
                    j += 1
            if i < len(nums1): nums.extend(nums1[i:])
            if j < len(nums2): nums.extend(nums2[j:])
        if len(nums) % 2 == 1:
            return nums[len(nums)//2]
        else:
            return (nums[len(nums)//2] + nums[len(nums)//2-1]) /2
            
时间复杂度：O(n+m)  需遍历nums1和nums2两个数组
空间复杂度：O(n+m)  需将nums1和nums2两个数组存储到nums中
