# 双指针，如果中间的柱子低于长度的柱子，则其接水量由较短的一端决定
class Solution:
    def trap(self, height: List[int]) -> int:
        if not height: return 0
        res = 0
        # 双指针，l，r为两端
        l, r = 0, len(height)-1
        # lh, rh为两端高度
        lh, rh = height[l], height[r]
        # 若l==r-1，则其中已没空间接水
        while l < r-1:
            # 因为接水量由较短一段决定，所以先考虑较短的一端
            if lh <= rh:
                l += 1
                # 如果height[l]<lh，则可将其用水增高至lh
                if height[l] < lh:
                    res += lh - height[l]
                else:
                    # 否则更新lh
                    lh = height[l]
            # 与左端类似
            else:
                r -= 1
                if height[r] < rh:
                    res += rh - height[r]
                else:
                    rh = height[r]
        return res
# 时间复杂度O(n)
# 空间复杂度O(1)
