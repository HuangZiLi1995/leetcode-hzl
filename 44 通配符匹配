# 动态规划
class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        # 转化为list，在前加上''，即可以index作为字符个数，方便处理
        s = [''] + [i for i in s]
        p = [''] + [i for i in p]
        # 去掉p中相连的'*'
        i = 2
        while i < len(p):
            if p[i]=='*' and p[i-1]=='*': p.pop(i)
            else: i += 1
        # 初始化record
        record = [[False]*len(s) for _ in range(len(p))]
        # s,p为空的时候为True,当s不为空，p为空的时候为False
        record[0][0] = True
        # 如果p中第一个位'*',则record[1][0]为True
        if len(p)>1 and p[1]=='*': record[1][0] = True
        # 遍历字符
        for i in range(1, len(s)):
            # 遍历模式
            for j in range(1, len(p)):
                # 如果p[j],s[i]字符相同或者p[j]为'?'则其等于record[j-1][i-1]
                if p[j]=='?' or p[j]==s[i]:
                    record[j][i] = record[j-1][i-1]
                # 如果p[j]为'*',其可能不匹配s[i]
                # 也可能匹配s[i]及其前面0个或者多个字符
                elif p[j] == '*':
                    record[j][i] = record[j-1][i] or record[j][i-1]
        return record[-1][-1]
# 时间复杂度O(len(s)*O(len(p)))
# 空间复杂度O(len(s)*O(len(p)))

class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        if not p: return s == ''
        i = 1
        while i < len(p):
            if p[i]=='*' and p[i-1]=='*':
                p = p[:i]+p[i+1:]
            else:
                i += 1
        
        def Match(s, p):
            if p == '*': return True
            if not s and not p: return True
            if not s or not p: return False
            if len(s) < len(p) - p.count('*'): return False
            if p[0] == '*':
                return Match(s, p[1:]) or Match(s[1:], p)
            if p[0]=='?' or s[0]==p[0]:
                return self.isMatch(s[1:], p[1:])
            return False
        
        return Match(s, p)
