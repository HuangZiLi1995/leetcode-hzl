# 回溯法
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        if n == 0: return []
        # 回溯函数：l：剩余左括号的个数，r：剩余右括号的个数，record：字符
        def backtrack(l, r, record=''):
            # 若l和r为0则左右括号用完，记录字符
            if l == 0 and r == 0: 
                res.append(record)
            # 如果l==0则只能填入右括号
            elif l == 0: 
                backtrack(l, r-1, record+')')
            # 如果l==r，这说明已填入的左右括号数相同，只能填入右括号
            elif l == r: 
                backtrack(l-1, r, record+'(')
            else:
                backtrack(l-1, r, record+'(')
                backtrack(l, r-1, record+')')
            return
        res = []
        backtrack(n, n)
        return res
# 时间复杂度O(2n)：一次填入一个字符
# 空间复杂度O(2n)：递归函数调用2n次
