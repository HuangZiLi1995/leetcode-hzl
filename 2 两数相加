class Solution:
    # 读取l1和l2，相加后再存储
	def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        # 如果l1或l2为空，则放回另一个链表即可
        if not l1:
            return l2
        if not l2:
            return l1
            
        # 以string类型读取l1中的数字
        l1_str = ''
        while l1:
            l1_str = str(l1.val) + l1_str
            l1 = l1.next
        
        # 以string类型读取l2中的数字
        l2_str = ''
        while l2:
            l2_str = str(l2.val) + l2_str
            l2 = l2.next
        
        # 计算两数之和
        l_str = str(int(l1_str) + int(l2_str))
        
        # 将数据存放在链表中
        # 虚拟头结点
        head = ListNode(None)
        l = head
        for s in l_str[::-1]:
            l.next = ListNode(int(s))
            l = l.next
        return head.next

时间复杂度：O(n)+O(n)+O(n)=O(n)  读取l1+读取l2+存储l
空间复杂度：O(n)+O(n)+O(n)+O(n)=O(n)  存储l1_str+存储l2_str+存储l_str+链表l

下面为直接在链表上计算，减少了空间复杂度
class Solution:
	# 分别计算每一位上的和，直接存储在链表中
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        # 虚拟头结点
		dummy = ListNode(None)
        l = dummy
		# 保存进位
        carry = 0
        while l1 or l2:
			读取l1和l2在该位上数值，如果不存在则为0
            x = l1.val if l1 else 0
            y = l2.val if l2 else 0
            # 计算该位上的和
			l.next =  ListNode( (x + y + carry) % 10 )
            # 计算改为上的进位
			carry = (x + y + carry) // 10
			# 如果下一位，则读取下一位
            if l1: l1 = l1.next
            if l2: l2 = l2.next
            l = l.next
        # 如果在末尾存在进入，则将该进位保存
		if carry: l.next = ListNode(carry)
        return dummy.next
		
时间复杂度：O(n)  需进行max(len(l1), len(l2))次运算
空间复杂度：O(n)+1=O(n)  l1,l2和的所需存储空间
