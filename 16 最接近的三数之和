第一个数遍历数组，第二，三个数双指针遍历数组
class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums.sort()
        re = nums[0] + nums[1] + nums[2]
        if re == target:
            return re
        # 选择第一个数
        for i in range(len(nums)-2):
            # 排除第一个数曲相同的值的情况
            if (i > 0) and (nums[i] == nums[i-1]):
                continue
            # 设定双指针
            j, k = i+1, len(nums)-1
            while j < k:
                total = nums[i] + nums[j] + nums[k]
                # 如果total比re更接近target，则更新re
                if abs(target-total) < abs(target-re):
                    re = total
                    # 如果re==target，则不可能有比re更接近target的，返回re
                    if re == target:
                        return re
                # 如果total<target,则增大j
                if total < target:
                    j += 1
                    while (j < k) and (nums[j] == nums[j-1]):
                        j += 1
                # 如果total>target,则减小k
                else:
                    k -= 1
                    while (j < k) and (nums[k] == nums[k+1]):
                        k -= 1
        return re
时间复杂度O(n2)：第一个数遍历数组O(n)*第二，三个数双指针遍历数组O(n)
空间复杂度O(1)
