迭代比较，每次比较一个字符
class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        # 如果p为空且s为空返回True，否则返回False
        # 如果s为空，p中可存在字符也可不存在字符，因为带*可表示不存在
        if not p: return not s
        # 判断s和p的首字符是否相同
        flag = s and (s[0] == p[0] or p[0] == '.')
        # 当p[1]为*时，首字符可不相同，可跳过p的前两个字符再比较
        # 当首字符相同时，由于*代表前一字符可多次使用，则p不变进入下次比较
        if len(p)>1 and p[1]=='*':
            return self.isMatch(s, p[2:]) or (flag and self.isMatch(s[1:], p))
        # 若p[1]不为*，则下次比较s[1:], p[1:]
        return flag and self.isMatch(s[1:], p[1:])

动态规划：自顶向下
class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        memo = {}
        def backtrack(i, j):
            if (i,j) in memo.keys(): return memo[(i,j)]
            if len(p)==j: return len(s)==i
            flag = len(s)>i and (s[i] == p[j] or p[j] == '.')
            if len(p)-1>j and p[j+1]=='*':
                memo[(i,j)] = backtrack(i, j+2) or (flag and backtrack(i+1, j)) 
            else:
                memo[(i,j)] = flag and backtrack(i+1, j+1)
            return memo[(i,j)]
        return backtrack(0, 0)
        
自底向上：从后向前推
class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        # 多出一行一列用来保存s或p为空的情况
        memo = [[False]*(len(p)+1) for _ in range(len(s)+1)]
        # s和p同时为空时未True，仅p为空时未False
        memo[-1][-1] = True
        for i in range(len(s),-1,-1):
            for j in range(len(p)-1,-1,-1):
                flag = len(s)>i and (s[i] == p[j] or p[j] == '.')
                if len(p)-1>j and p[j+1]=='*':
                    memo[i][j] = memo[i][j+2] or (flag and memo[i+1][j]) 
                else:
                    memo[i][j] = flag and memo[i+1][j+1]
        return memo[0][0]
