# 动态规划
# 当word1[i] == word2[j]时，所需步骤与[i-1][j-1]一致
# 不同时，则需考虑一下三种操作
# 替换：[i-1][j-1]+1(word2[j]替换word1[i])
# 插入：[i][j-1]+1(插入word2[j])
# 删除：[i-1][j]+1(删除word1[i])
class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        # 前面加上空，可代表都为空时
        word1 = ' ' + word1
        word2 = ' ' + word2
        n, m = len(word1), len(word2)
        dp = [[None]*m for _ in range(n)]
        # 都为空时不需要操作
        dp[0][0] = 0
        # j为0时，删除所有i
        for i in range(1,n):
            dp[i][0] = i
        # i为0时，插入所有j
        for j in range(1,m):
            dp[0][j] = j
        # 遍历
        for i in range(1,n):
            for j in range(1,m):
                # 当word1[i] == word2[j]时，所需步骤与[i-1][j-1]一致
                if word1[i] == word2[j]:
                    dp[i][j] = dp[i-1][j-1]
                else:
                    #              替换         删除        插入
                    dp[i][j] = min(dp[i-1][j-1],dp[i-1][j],dp[i][j-1])+1
        return dp[-1][-1]
# 时间复杂度O(m*n)
# 空间复杂度O(m*n)
