# 柱状图
# 向左扩展，计算以该点向左扩展的最大宽度
# 再向上扩展，计算以该点为右下角的矩阵面积
# 面积为  高度*最小的宽度
class Solution:
    def maximalRectangle(self, matrix: List[List[str]]) -> int:
        record = [[0]*len(matrix[0]) for _ in range(len(matrix))]
        # 计算每个网格向左扩展的最大宽度
        for i in range(len(matrix)):
            if matrix[i][0] == '1':
                record[i][0] = 1
            for j in range(1, len(matrix[0])):
                if matrix[i][j] == '1':
                    record[i][j] = record[i][j-1] + 1
        res = 0
        # 向上扩展
        for i in range(len(record)):
            for j in range(len(record[0])):
                # 如果本身宽度为0，则无需扩展
                if record[i][j] == 0: continue
                # 取出该点的宽度，高度为1时，宽度即面积
                width, area = record[i][j], record[i][j]
                # 相上扩展
                for k in range(i-1,-1,-1):
                    # 如果上面为0，则无需扩展
                    if record[k][j] == 0: break
                    # 去这段高度的最小宽度
                    width = min(width, record[k][j])
                    # 计算以该点为右下角的最大面积
                    area = max(area, width*(i-k+1))
                # 计算全局最大面积
                res = max(res, area)
        return res
# 时间复杂度O(n*m*m):n=len(matrix[0]);m=len(matrix)
# 空间复杂度O(n*m)
