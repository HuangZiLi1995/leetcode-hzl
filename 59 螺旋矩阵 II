# 设置四个方向
# 当碰到边界时旋转方向
# 如果沿着当前方向前进已经超出边界
# 或者下一个位置已经填过，则需旋转方向
class Solution:
    def generateMatrix(self, n: int) -> List[List[int]]:
        if n == 0: return []
        res = [[0]*n for _ in range(n)]
        # 四个方向
        ds = [[0,1], [1,0], [0,-1], [-1,0]]
        x, y, d = 0, 0, 0
        for i in range(1, n**2+1):
            # 设定当前位置
            res[x][y] = i
            # 如果沿当前方向前进一位
            next_x, next_y = x+ds[d][0], y+ds[d][1]
            # 未遇到边界条件，则前进一位
            if next_x<n and next_y<n and res[next_x][next_y]==0:
                x, y = next_x, next_y
            # 否则旋转方向，前进一位
            else:
                d = (d+1) if d<3 else 0
                x, y = x+ds[d][0], y+ds[d][1]
        return res
# 时间复杂度O(n2)
# 空间复杂度O(n2)
